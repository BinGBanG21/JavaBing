/**
 * 对于整数，有四种表示方式： 
 * 	二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。 
 * 	十进制：0-9 ，满 10 进 1。 
 * 	八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。 
 * 	十六进制：0-9 及 A(10)-F(15)，满 16 进 1. 以 0x 或 0X 开头表示。此处的 A-F 不区分大小写。
 * 进制的转换
 * 	第一组： 
 * 1) 二进制转十进制 
 * 		规则从最低位（右边）开始， 将每个位上的数提取出来， 乘以2的（位数-1）次方然后求和。
 * 		将0b1011转成十进制的数
 * 		0b1011=1*2的（1-1）次方+2的（4-1）次方法=1+2+0+8=11
 * 2) 八进制转十进制 
		规则∶ 从最低位（右边）开始， 将每个位上的数提取出来， 乘以8的（位数-1）次方然后求和。
		将0234转成十进制的数0234=4*8^0+3*8^1+2*8^2=4+24+128=156
 * 3) 十六进制转十进制 
 * 		规则：从最低位(右边)开始，将每个位上的数提取出来，乘以 16 的(位数-1)次方，然后求和。 
 * 		将 0x23A 转成十进制的数 0x23A = 10 * 16^0 + 3 * 16 ^ 1 + 2 * 16^2 = 10 + 48 + 512 = 570
 *  第二组： 
 * 1) 十进制转二进制 
 * 		规则：将该数不断除以 2，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制。 
 * 		将 34 转成二进制 = 0B00100010
 * 2) 十进制转八进制 
 * 		规则：将该数不断除以 8，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的八进制。 
 * 		请将 131 转成八进制 => 0203
 * 3) 十进制转十六进制
 * 		规则：将该数不断除以 16，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的十六进制。 
 * 		请将 237 转成十六进制 => 0xED
 * 第三组 
 * 1) 二进制转八进制 
 *      规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。 
 *      将 ob11010101 转成八进制 ob11(3)010(2)101(5) => 0325
 * 2) 二进制转十六进制 
 *      规则：从低位开始，将二进制数每四位一组，转成对应的十六进制数即可。 
 *      将 ob11010101 转成十六进制 ob1101(D)0101(5) = 0xD5
 * 第四组  
 * 1) 八进制转二进制 
 *      规则：将八进制数每 1 位，转成对应的一个 3 位的二进制数即可。
 *      将 0237 转成二进制 02(010)3(011)7(111) = 0b10011111
 * 2) 十六进制转二进制
 *      规则：将十六进制数每 1 位，转成对应的 4 位的一个二进制数即可。
 *      将 0x23B 转成二进制 0x2(0010)3(0011)B(1011) = 0b001000111011
 * 
 * 位运算(>>|<< 算术移动  >>>移动) 其实就是十进制小数点的移动 十进制移动就乘除10  2进制移动就乘除2
 *      int a=1>>2; // 1 向右位移 2 位 
 *      int b=-1>>2;//算术右移 
 *      int c=1<<2;//算术左移 
 *      int d=-1<<2;// 
 *      int e=3>>>2;//无符号右移
 *      java 中有 7 个位运算(&、|、^、~、>>、<<和 >>>)
 *          按位与&：两位全为1，结果为1，否则为0 
            按位或：两位有一个为1，结果为1，否则为0
            按位异或：两位一个为0，一个为1，结果为1，否则为0
            按位取反~：0->1,1->0        
 * 原码 反码 补码
 *      1.二进制的最高位是符号位：0表示正数，1表示负数
 *      2.正数的原码，反码，补码都一样（三码合一）
        3.负数的反码=它的原码符号位不变，其它位取反（0->1，1->0）
        5.0的反码，补码都是0
        6.java没有无符号数，换言之，java中的数都是有符号的
        7.在计算机运算的时候，都是以补码的方式来运算的.
        8.当我们看运算结果的时候，要看他的原码
 * 
 * 
 /

 

