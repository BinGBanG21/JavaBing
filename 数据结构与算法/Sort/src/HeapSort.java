/*
    堆排序
       1.堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。
       2.堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆,
         注意:没有要求结点的左孩子的值和右孩子的值的大小关系。
       3.每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆
       4.特点：
         大顶堆特点：(顶点值大于左子节点&&顶点值大于右子节点)
            arr[i] >= arr[2*i+1] && arr[i] >= arr[2*i+2]  // i 对应第几个节点，i从0开始编号
         小顶堆：arr[i] <= arr[2*i+1] && arr[i] <= arr[2*i+2] // i 对应第几个节点，i从0开始编号
       5.一般升序采用大顶堆，降序采用小顶堆
    堆排序的思想：
        1.将待排序序列构造成一个大顶堆
        2.此时，整个序列的最大值就是堆顶的根节点。
        3.将其与末尾元素进行交换，此时末尾就为最大值。
        4.然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。
        5.可以看到在构建大顶堆的过程中，元素的个数逐渐减少，最后就得到一个有序序列了.
          其实就是每次排序构建一个堆 然后把堆顶元素放在数组末尾

* */
public class HeapSort {
    public static void main(String[] args) {
        int[] arr = {4, 6, 8, 5, 9};

    }

    public static void sort(int[] arr) {
        //将数组分堆
        for (int i = arr.length / 2 - 1; i > 0; i--) {
            adjustHeap(arr, i, arr.length);
        }
        //将最大元素"沉"到数组未端 最大元素在0的位置;
        int temp = 0;
        for (int j = arr.length - 1; j > 0; j--) {
            temp =arr[j];
            arr[j] = arr[0];
            arr[0] = temp;
            //调整结构
            adjustHeap(arr,0,j);
        }
    }

    /**
     * 功能：将每组非叶子节点的树结构调整成大顶堆
     *
     * @param arr 待调整的数组
     * @param i   非叶子节点的索引
     * @param len 待调整数组的长度（每次确定一个最值,确定的最值不参与下次排序）
     */
    public static void adjustHeap(int[] arr, int i, int len) {
        //保存当前的值
        int temp = arr[i];
        //循环 以i为顶点 构建大顶堆 找出左右子节点中的较大值
        for (int k = i * 2 + 1; k < len; k = k * 2 + 1) {
            if (k + 1 < len && arr[k] < arr[k + 1]) {
                k = k + 1; //得到左右子节点中的较大值
            }
            if (arr[k] > temp) { //较大值和i节点比较
                //如果节点中的较大值大于当前值 那么进行赋值
                arr[i] = arr[k];
                i = k; //将i节点作为左子节点 继续循环比较 体现从下至上 从左到右
            } else { //如果小于那么不用交换
                break;
            }
        }
        //for循环结束后 将以i为父节点的树的最大值 放在了最顶部（局部）
        arr[i] = temp; //将temp的值放到调整后的位置
    }
}

//3).重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。

