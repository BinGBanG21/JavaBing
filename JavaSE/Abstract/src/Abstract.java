/*
*   抽象类的使用场景
*       总结一句：父类方法的不确定性
*       当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类
*       当一个类中存在抽象方法时，需要将该类声明为 abstract 类
*       一般来说，抽象类会被继承，有其子类来实现抽象方法
*   抽象类
*       1）用abstract关键字来修饰一个类时，这个类就叫抽象类
            访问修饰符  abstract  类名 {
            }
*       2）用abstract关键字来修饰一个方法时，这个方法就是抽象方法
            访问修饰符 abstract 返回类型 方法名（参数列表）；//没有方法体
*       3）抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类
*   抽象类使用注意和细节
*       1）抽象类不能被实例化
*       2）抽象类不一定要包含abstract方法。也就是说，抽象类可以没有abstract方法
*       3）一旦类包含了abstract方法，则这个类必须声明为abstract
*       4）abstract只能修饰类和方法，不能修饰属性和其它的
*       5）抽象类可以有任意成员【抽象类本质还是类】，比如∶非抽象方法、构造器、静态属性等等
*       6）抽象方法不能有主体，即不能实现
*       7）如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类
*       8）抽象方法不能使用private、final和static来修饰，因为这些关键字都是和重写相违背的
* */
public class Abstract {
}
