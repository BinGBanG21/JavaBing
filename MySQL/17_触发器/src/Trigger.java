public class Trigger {
    public static void main(String[] args) {

    }
    /*
    场景：
        在实际开发中，我们经常会遇到这样的情况：有2个或者多个相互关联的表，如商品信息和库存信息分别存放在2个不同的数据表中，
        我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时 在库存表中添加一条库存记录。
        这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用 事务 包裹起来，确保这两个操 作成为一个 原子操作 ，
        要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很 容易忘记其中的一步 ，导致数据缺失。
        这个时候，咱们可以使用触发器。你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。
        这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。

    1. 触发器
        触发器是由 事件来触发 某个操作，这些事件包括 INSERT 、UPDATE 、DELETE 事件。
        所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生 了，就会 自动 激发触发器执行相应的操作。
        当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。
    2. 触发器的创建
        1) 语法
            CREATE TRIGGER 触发器名称
            {BEFORE|AFTER} {INSERT|UPDATE|DELETE} ON 表名
            FOR EACH ROW
            触发器执行的语句块
            说明：
            * 表名 ：表示触发器监控的对象。
            * BEFORE|AFTER ：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。
            * INSERT|UPDATE|DELETE ：表示触发的事件。
              * INSERT 表示插入记录时触发；
              * UPDATE 表示更新记录时触发；
              * DELETE 表示删除记录时触发。
            * 触发器执行的语句块 ：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。
    3. 查看、删除触发器
        1)  查看触发器
            查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。
            方式1：查看当前数据库的所有触发器的定义
                SHOW TRIGGERS\G
            方式2：查看当前数据库中某个触发器的定义
                SHOW CREATE TRIGGER 触发器名
            方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。
                SELECT * FROM information_schema.TRIGGERS;
        2) 删除触发器
            触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：
                DROP TRIGGER IF EXISTS 触发器名称;
    4. 触发器的优缺点
        1) 优点
            1、触发器可以确保数据的完整性。
            2、触发器可以帮助我们记录操作日志。
               利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。
               这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。
            3、触发器还可以用在操作数据前，对数据进行合法性检查。
               比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏…… 这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。
        2) 缺点
            1、触发器最大的一个问题就是可读性差。
               因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能不受应用层的控制 。
            2、相关数据的变更，可能会导致触发器出错。
               特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。
               这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。


     */
}
