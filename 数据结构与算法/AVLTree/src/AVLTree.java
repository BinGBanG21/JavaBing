/*
    平衡二叉树(AVL树)
        看一个案例(说明二叉排序树可能的问题)
            给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在.
            左边BST 存在的问题分析:
                1.左子树全部为空，从形式上看，更像一个单链表.
                2.插入速度没有影响
                3.查询速度明显降低(因为需要依次比较), 不能发挥BST的优势，因为每次还需要比较左子树，其查询速度比单链表还慢
                *解决方案-平衡二叉树(AVL)
        平衡二叉树
            1.平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以保证查询效率较高。
            2.具有以下特点：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平
              衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。
        应用案例-单旋转(左旋转)
            要求: 给你一个数列，创建出对应的平衡二叉树.数列 {4,3,6,5,7,8}

* */


public class AVLTree {
    public static void main(String[] args) {
        int[] arr = {4, 3, 6, 5, 7, 8};

    }
}
//何为旋转 就好像一根绳子 你随便找一个点把绳子拎起来 绳子的左右长度进行对比
//如果右边长 那我们拎起来的点就要左移 其实就是换一个更大的根节点 左边同理

//首先计算左右子树的高度
