/*
面向对象编程-多态
    多[多种]态[状态]基本介绍
        方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的。
    多态的具体体现
        1) 方法的多态  重写和重载就体现多态
        2) 对象的多态
            （1）一个对象的编译类型和运行类型可以不一致
            （2）编译类型在定义对象时，就确定了，不能改变
            （3）运行类型是可以变化的.
            （4）编译类型看定义时=号的左边，运行类型看=号的右边
    多态注意事项
        多态的前提是：两个对象(类)存在继承关系
        多态的向上转型
            1）本质∶父类的引用指向了子类的对象
            2）语法父类类型    引用名=new 子类类型（）
            3）特点∶编译类型看左边，运行类型看右边。可以调用父类中的所有成员（需遵守访问权限），不能调用子类中特有成员
        多态向下转型
            1）语法  子类类型  引用名 =（子类类型） 父类引用
            2）只能强转父类的引用，不能强转父类的对象
            3）要求父类的引用必须指向的是当前目标类型的对象
            4）当向下转型后，可以调用子类类型中所有的成员

* */


public class Polymorphic {
}
